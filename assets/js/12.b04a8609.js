(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{582:function(t,n,e){"use strict";e.r(n);var a=e(17),o=Object(a.a)({},(function(){var t=this,n=t.$createElement,e=t._self._c||n;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"前言"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[t._v("#")]),t._v(" 前言")]),t._v(" "),e("p",[t._v("最近在用Vue模仿懂车帝小程序写一个小项目练手的时候碰到一个问题")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a9e533d052624b1484b8b842f8c7bd38~tplv-k3u1fbpfcp-watermark.image?",alt:"1.png"}})]),t._v(" "),e("p",[e("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/aeb66323f0bc4ead9436b5265e917ba8~tplv-k3u1fbpfcp-watermark.image?",alt:"2.png"}})]),t._v(" "),e("h1",{attrs:{id:"问题"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#问题"}},[t._v("#")]),t._v(" 问题")]),t._v(" "),e("p",[t._v("主页资讯有三种布局，并且后端返回的数据也不一样，显然页面是组件通过循环子组件来实现的，但是问题来了，每个子组件的的样式和数据是不一样的，可以看到数据中有个type属性，我们可以判断数据中的type值来动态显示组件于是有了下面的代码")]),t._v(" "),e("h1",{attrs:{id:"解决方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#解决方法"}},[t._v("#")]),t._v(" 解决方法")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('//info为父组件循环传给子组件需要在子组件上渲染的数据\n<div class="information" v-for="item in informations" :key="item.id">\n  \x3c!-- 符合条件type == \'1\'，加载组件1 --\x3e\n  <Imformation1 v-if="item.type == \'1\'" :info="item"/>//子组件1\n  \x3c!-- 符合条件type == \'2\'，加载组件2 --\x3e\n  <Imformation2 v-if="item.type == \'2\'" :info="item"/> //子组件2\n  \x3c!-- 符合条件type == \'3\'，加载组件3 --\x3e\n  <Imformation3 v-if="item.type == \'3\'" :info="item"/> //子组件3\n</div>\n')])])]),e("p",[t._v("但是问题又来了，显然这代码不优雅,如果有很多子组件场景，那么就需要写很多的分支。有没有办法优化呢？")]),t._v(" "),e("h1",{attrs:{id:"优化"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#优化"}},[t._v("#")]),t._v(" 优化")]),t._v(" "),e("p",[t._v("办法总比困难多，想想方法还是有的，因为上面的例子代码比较长，不便于观看，另起一个demo.")]),t._v(" "),e("h2",{attrs:{id:"普通的解决方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#普通的解决方法"}},[t._v("#")]),t._v(" 普通的解决方法")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("<div>\n    \x3c!-- 符合条件type == '1'，加载组件1 --\x3e\n    <Component1 v-if=\"type==''1\" /> \n    \x3c!-- 符合条件type == '2'，加载组件2 --\x3e\n    <Component2 v-if=\"type=='2'\" /> \n    \x3c!-- 符合条件type == '2'，加载组件2 --\x3e\n    <Component3 v-if=\"type=='3'\" />\n</div>\n")])])]),e("h2",{attrs:{id:"优化方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#优化方法"}},[t._v("#")]),t._v(" 优化方法")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('<template>\n  <div>\n    <component :is="currentComponent" />\n  </div>\n</template>\n\n<script>\n//有多少组件就引入多少\nimport Component1 from "../components/Component1.vue";\nimport Component2 from "../components/Component2.vue";\nimport Component3 from "../components/Component3.vue";\n//...\nexport default {\n  computed: {\n    condition: function () {\n       // state里的info中有个type值为1或2或3...\n      return this.state.info.type; // should return 1 || 2 || 3...\n    },\n    //当前应该加载的组件\n    currentComponent: function () {\n      return "Components" + this.condition;\n    },\n  },\n  components: {\n    Component1,\n    Component2,\n    Component3,\n    //...\n  },\n};\n<\/script>\n')])])]),e("p",[t._v("这样一来，以后再有新的子组件增加，也仅仅需要引入和注册组件即可，加载的事情就可以自动判断完成了。")]),t._v(" "),e("h1",{attrs:{id:"说明"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#说明"}},[t._v("#")]),t._v(" 说明")]),t._v(" "),e("p",[t._v("本文章主要个人学习时一点心得，如有不妥之初希望各位大佬指出，如果有更好的办法也希望大佬能够提出哦。")])])}),[],!1,null,null,null);n.default=o.exports}}]);